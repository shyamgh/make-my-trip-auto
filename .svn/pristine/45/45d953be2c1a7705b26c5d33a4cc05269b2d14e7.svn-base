package utils;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.Map;
import java.util.Properties;
import java.util.Set;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;

import logger.CustomLogger;

import org.apache.commons.io.FileUtils;
import org.openqa.selenium.By;
import org.openqa.selenium.NoSuchElementException;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.support.*;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.ui.ExpectedCondition;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.ITestContext;
import org.testng.Reporter;
import org.testng.asserts.SoftAssert;
import org.testng.asserts.LoggingAssert;

import com.logger.MyLogger;

import java.io.InputStream;


public class GenericFunctions {
	private final WebDriver driver;
	private ITestContext context;
	private SoftAssert softassert;
	private LoggingAssert lassert;
	

	public GenericFunctions(WebDriver driver){
		this.driver = driver;
		softassert = new SoftAssert();
	}
	public GenericFunctions(WebDriver driver, ITestContext context){
		this.driver = driver;
		this.context = context;
		softassert = new SoftAssert();
		lassert = new LoggingAssert();
	}
	
	/**
	 * 
	 * This will open the given URL
	 * 
	 * @param url
	 * @author shyam
	 * 
	 */
	public void OpenThisUrl(String url)
	{
		//Reporter.log("Opening url "+url);
		CustomLogger.logMessage(null,"","Opening url "+url,1);
		driver.get(url);
	}
	
	/**
	 * This function closes and quits the driver
	 * @author Shyam
	 */
	public void CloseBrowser() {
		//Reporter.log("Closing the browser and driver instance");
		CustomLogger.logMessage(null,"","Closing the browser and driver instance",1);
		driver.close();
		driver.quit();
	}
	
	/**
	 * This function waits for page to load by verifying the given text in page title
	 * @param vText:text to be verify for ensure correct page opened
	 * @author shyam
	 * 
	 */	
	public void WaitTillPageLoad(String vText)
	{	
		final String verifyText = vText; 
		//Reporter.log("Wait till page to load");
		CustomLogger.logMessage(null,"Wait till page load","Wait till page to load",1);
		try {
	       (new WebDriverWait(driver, SystemWaits.STANDARD_WAIT)).until(new ExpectedCondition<Boolean>() {
	           public Boolean apply(WebDriver d) {
	        	   return d.getTitle().startsWith(verifyText);
	          }
	       });
	       //Reporter.log("Text '"+verifyText+"' found in page title. Page loaded.");
	       CustomLogger.logMessage(null,"Wait till page load","Text '"+verifyText+"' found in page title. Page loaded.",1);
		} catch (Exception e) {
			//Reporter.log("FAIL: Wait for page to load, Exception while waiting for page to laod, Searched page title '"+verifyText+"'. "+e.getMessage());\
			CustomLogger.logMessage(Level.SEVERE,"Wait till page load","Exception while waiting for page to laod, Searched page title '"+verifyText+"'. "+e.getMessage(),1);			
		}
	}

	/**
	 * This function reads testng.xml parameter with given name
	 * @param paramName
	 * @author shyam
	 * 
	 */	
	public String GetSystemParameter(String paramName)

	{
		return context.getCurrentXmlTest().getParameter(paramName);
	}
	
	public boolean WaitForObject(WebElement webEle) throws WebElementNotFound
	/**
	 * This function waits for the given object to appear on UI
	 * @param webEle
	 * @author shyam
	 * @return boolean
	 * 
	 */
	{
		boolean found = false;
		for(int i=0;i<SystemWaits.STANDARD_WAIT;i++)
		{
			if (webEle.isDisplayed()) {
				//Reporter.log("Web element "+webEle.toString()+ " displayed");
				CustomLogger.logMessage(null,"Verify object displayed","Web element "+webEle.toString()+ " displayed",1);
				break;				
			}
		}
		if (!found) {
			CustomLogger.logMessage(Level.WARNING,"Verify object displayed","Web element "+webEle.toString()+ " not displayed",1);
			throw new WebElementNotFound("Web element "+webEle.toString()+ " displayed");
		} else
			return true;
	}
	
	/**
	 * This function waits for the given object to appear on UI
	 * @param webEle, timeout
	 * @return boolean
	 * @author shyam
	 * 
	 */
	public boolean WaitForObject(WebElement webEle, int timeout) throws WebElementNotFound

	{
		boolean found = false;
		driver.manage().timeouts().implicitlyWait(1, TimeUnit.SECONDS);
		for(int i=0;i<timeout;i++)
		{
			try {
				if (webEle.isDisplayed()) {
					//Reporter.log("Web element "+webEle.toString()+ " is displayed");
					CustomLogger.logMessage(null,"Verify object displayed","Web element "+webEle.toString()+ " displayed",1);
					found = true;
					break;				
				}
			} catch (NoSuchElementException ne) {
				//
			}
			
		}
		driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
		
		if (!found) {
			CustomLogger.logMessage(Level.WARNING,"Verify object displayed","Web element "+webEle.toString()+ " not displayed",1);
			throw new WebElementNotFound("Web element not displayed");
		} else
			return true;
	}
	
	/**
	 * This function waits for the given error object to appear on UI, thows exception if error appears
	 * @param webErr, timeout
	 * @return boolean
	 * @author shyam
	 * 
	 */
	public boolean WaitForErrorObject(String erID, int timeout)
	{
		WebElement webErr = driver.findElement(By.id(erID));
		driver.manage().timeouts().implicitlyWait(timeout, TimeUnit.SECONDS);
		System.out.println(webErr.isDisplayed());
		try {
			Thread.sleep(2000);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		softassert.assertEquals(!(webErr.isDisplayed()), true, "Verify if errro not displayed");
		//lassert.assertEquals(!(webErr.isDisplayed()), true, "Verify if errro not displayed");
		//assert !(webErr.isDisplayed()) : "Verify if errror not displayed";
		if (webErr.isDisplayed())
			assert false : "Verify if errror not displayed \n";
		else
			Reporter.log("Login successful \n");
		driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
		return false;
	}
	
	/**
	 * This function will log the error message in the test report, it will be exception
	 * @param errorMsg
	 * @author shyam
	 * @return none 
	 */
	public static void LogError(String errorMsg)

	{
		Throwable t = new Throwable(new Exception(errorMsg));
		Reporter.getCurrentTestResult().setThrowable(t);
	}

	/**
	 * This function will log the given exception in the test report
	 * @param except
	 * @author shyam
	 * @return none 
	 */
	public static void LogError(Exception except)
	{
		Throwable t = new Throwable(except);
		Reporter.getCurrentTestResult().setThrowable(t);
	}

	/**
	 * This method is used to search string in given array list 
	 * @param al
	 * @param srchString
	 * @return boolean : true if found
	 */
	public static boolean searchThisArrayList(ArrayList al, String srchString)
	{
		boolean found = false;
		Iterator<String> itr = al.iterator();
        while(itr.hasNext()){
        	String s = itr.next();
        	if (s.contains(srchString)) {
        		//Reporter.log("Given search string "+srchString+" found in line "+s);
        		CustomLogger.logMessage(null, "Search message in array list", "Given search string "+srchString+" found in line "+s, 1);
        		found = true;
        		break;
        	}
        }
        if (!found)
        	CustomLogger.logMessage(Level.WARNING, "Search message in array list", "Given search string "+srchString+" not found", 1);
		return found;
	}
	
/*	public void FindElement(WebDriver driver, By by, int timeout)
	{
		 // Tell webdriver to wait
		WebDriverWait wait = new WebDriverWait(driver, TimeSpan.FromSeconds(4));
		 
		// Test the autocomplete response - Explicit Wait
		IWebElement autocomplete = wait.Until(x => x.FindElement(By.ClassName("ac-row-110457")));
		 
	}*/
	
	/**
	 * This function is used to verify if the web element with given By object is present
	 * @author shyam
	 * @param by
	 * @return boolean : true if the element is present 
	 */
	public boolean verifyElementPresent(By by)
	{
		CustomLogger.logMethodStart();

		boolean found = false;
		if (driver.findElements(by).size() != 0) {
			found = true;
        } else {
        	//Reporter.log("verifyElementPresent failed, element ["+by.toString()+"] not found.");
        	CustomLogger.logMessage(Level.WARNING, "Verify element present", "element ["+by.toString()+"] not found.",1);
        	System.out.println("verifyElementPresent failed, element ["+by.toString()+"] not found.");
        }
		
		CustomLogger.logMethodEnd();
		return found;
	}
	
	/**
	 * This function return the properties object loaded using given input file
	 * @author shyam
	 * @param prop
	 * @return Properties
	 */
	public static Properties loadPropertiesFromThisFile(String prop)
	{
		Properties props = new Properties();
		InputStream in = null;
    	try {
    	    in = new FileInputStream(prop);//getClass().getResourceAsStream(prop);
    	    props.load(in);
    	} catch (IOException e) {
    		//Reporter.log("Error while loading properties file");
    		//Reporter.log(e.getMessage());
    		CustomLogger.logMessage(Level.SEVERE, "Load properties file", "Error while loading properties file", 1);
    	} finally {
			if (in != null) {
				try {
					in.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}
    	return props;
	}

	/**
	 * This method can be used to capture screen shot during error or some important step
	 * @author shyam
	 * @param stepName
	 */
	public void takeScreenShot(WebDriver driver, String stepName)
	{
		DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		Date date = new Date();
		
		File screenshot = ((TakesScreenshot) driver).getScreenshotAs(OutputType.FILE);
		try {
		    FileUtils.copyFile(screenshot, new File(EnvironmentVariables.PROJECT_PATH+"\\test-output\\"+stepName+"_"+dateFormat.format(date)+".png"));
		    } catch (IOException e) {
		        e.printStackTrace();
		    }
		}
}


class WebElementNotFound extends Exception
{
	private static final long serialVersionUID = 3461899582505930473L;
	private String message = null;
 
    public WebElementNotFound() {
        super();
    }
 
    public WebElementNotFound(String message) {
        super(message);
        this.message = message;
    }
 
    public WebElementNotFound(Throwable cause) {
        super(cause);
    }
 
    @Override
    public String toString() {
        return message;
    }
 
    @Override
    public String getMessage() {
        return message;
    }
}
